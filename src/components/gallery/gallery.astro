---
const { folder } = Astro.props;
import { transformImage } from '@xata.io/client';

// Get all images in /src/images then return only those that include the folder name
const images = await Astro.glob('../../images/**/*').then((files) => {
  return files.map((file) => file.default);
});

const folderImages = images.filter((image) => {
  return image.src.includes(folder);
});

import { xata } from '@lib/xata';

const record = await xata.db.galleries.read(folder);

export const fetchMetadata = async (metadataUrl: string): Promise<ImageMetadata | null> => {
  try {
    const response = await fetch(metadataUrl);
    if (!response.ok) {
      throw new Error('Failed to fetch metadata');
    }
    const data: ImageMetadata = await response.json();
    return data;
  } catch (error) {
    console.error('Error fetching metadata:', error);
    return null;
  }
};

const imagesWithMetadata = await Promise.all(
  record?.images?.map(async (image) => {
    const transformedUrl = transformImage(image.url, {
      width: 1200
    });

    const transformedMeta = transformImage(image.url, {
      width: 1200,
      format: 'json'
    });

    const metadata = await fetchMetadata(transformedMeta);

    return {
      transformedUrl,
      metadata
    };
  }) ?? []
);
---

{
  imagesWithMetadata.map(({ transformedUrl, metadata }) => (
    <img src={transformedUrl} width={metadata.width} height={metadata.height} alt="Folder image" />
  ))
}
<style>
  img {
    max-width: 1200px !important;
    width: 100% !important;
    height: auto;
    margin-left: auto;
    margin-right: auto;
    margin-bottom: 0.5rem !important;
  }

  img:last-child {
    margin-bottom: 0;
  }
</style>
