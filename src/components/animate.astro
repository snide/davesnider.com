---

---

<slot />

<script>
  const animateItems = () => {
    const items = Array.from(document.querySelectorAll('.animate-item'));

    const observer = new IntersectionObserver(
      (entries) => {
        // Filter the entries that are currently intersecting
        const inViewEntries = entries.filter((entry) => entry.isIntersecting);

        // If there are items in view, animate them
        if (inViewEntries.length > 0) {
          requestAnimationFrame(() => {
            inViewEntries.forEach((entry, index) => {
              entry.target.classList.add('in-view');
              // Delay is determined based on the order the element appears in the current in-view list
              entry.target.style.animationDelay = `${index * 100}ms`;
              observer.unobserve(entry.target);
            });
          });
        }
      },
      { threshold: 0 }
    );

    items.forEach((item) => {
      observer.observe(item);
    });
  };

  document.addEventListener('astro:page-load', () => {
    requestAnimationFrame(animateItems);
  });
</script>

<style is:global>
  .animate-item {
    opacity: 0;
  }
  .in-view {
    animation: slideup 0.2s ease-in-out;
    animation-fill-mode: both;
    animation-delay: 200ms;
  }

  @keyframes slideup {
    from {
      opacity: 0;
      transform: scale(0.9) translateY(1rem);
    }

    to {
      opacity: 1;
    }
  }
</style>
