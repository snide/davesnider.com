---
import Base from '@layouts/base.astro';
import { formatDate } from '@services/format-date';
import { CollectionEntry, getEntryBySlug, getCollection } from 'astro:content';
import { syncXataSearch } from '@lib/search';

export async function getStaticPaths() {
  const blogEntries = await getCollection('posts');
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry }
  }));
}

const { entry } = Astro.props;
const { Content } = await entry!.render();

const formattedDate = formatDate(entry?.data.pubDate);

const pageImageProp = {
  ...(entry?.data.image !== undefined && {
    pageImage: Astro.site + entry.data.image.src
  })
};

const pageProps = {
  pageTitle: entry?.data.title,
  pageDescription: entry?.data.description,
  ...pageImageProp
};

if (import.meta.env.PROD) {
  await syncXataSearch(entry);
}
---

<Base {...pageProps}>
  <div class="post">
    <h1>{entry?.data.title}</h1>
    <p class="post__date">{formattedDate}</p>
    <Content />
    <div>
      <a href="/">&#8668; More posts</a>
    </div>
  </div>
</Base>

<style is:global>
  .post {
    margin: 0 auto;
    animation-duration: 0.5s;
  }

  .post *:not(:last-child) {
    margin-bottom: 1.5rem;
  }

  .post > * {
    max-width: 40rem;
    margin: 0 auto;
  }

  .post a {
    padding: 0.1rem 0.2rem;
    font-weight: 700;
    text-decoration: underline;
  }

  .post a:hover {
    background-color: var(--fg);
    color: var(--bg);
    outline: solid 2px var(--fg);
  }

  .post h1,
  .post h2,
  .post h3,
  .post h4,
  .post h5,
  .post h6 {
    margin: 0 auto;
    font-family: 'Sovana', serif;
  }

  .post h1 {
    font-size: 3rem;
    line-height: 1.1;
    margin-bottom: 0.5rem !important;
  }

  .post pre {
    padding: 2rem;
    margin: 0 auto;
    max-width: 44rem;
    line-height: 1.5;
    background-color: var(--fg) !important;
  }

  .post pre code {
    font-family: 'BerkeleyMono', monospace !important;
    font-size: 0.8rem;
    font-weight: 600;
  }

  .post pre ::selection {
    color: var(--fg);
    background-color: var(--bg);
  }

  .post > *:first-child {
    opacity: 1;
    animation-duration: 0.5s;
    animation-name: slidedown;
    animation-fill-mode: both;
    animation-timing-function: ease-in-out;
  }

  .post > *:not(:first-child) {
    opacity: 1;
    animation-duration: 0.25s;
    animation-name: slideup;
    animation-fill-mode: both;
    animation-timing-function: ease-in-out;
    /*  animation-timing-function: cubic-bezier(0.694, 0.0482, 0.335, 1);  */
  }

  .post > *:nth-child(1) {
    animation-delay: 100ms;
  }

  .post > *:nth-child(2) {
    animation-delay: 100ms;
  }

  .post > *:nth-child(3) {
    animation-delay: 500ms;
  }

  .post > *:nth-child(4) {
    animation-delay: 600ms;
  }

  .post > *:nth-child(5) {
    animation-delay: 700ms;
  }

  .post > *:nth-child(6) {
    animation-delay: 800ms;
  }

  .post > *:nth-child(7) {
    animation-delay: 900ms;
  }

  .post > *:nth-child(8) {
    animation-delay: 1000ms;
  }

  .post > *:nth-child(9) {
    animation-delay: 800ms;
  }

  .post__date {
    font-family: 'BerkeleyMono', monospace;
    text-transform: uppercase;
    font-size: 0.8rem;
  }

  @keyframes slideup {
    from {
      opacity: 0;
      transform: translateY(3rem);
    }

    to {
      opacity: 1;
    }
  }

  @keyframes slidedown {
    from {
      opacity: 0;
      transform: translateY(-3rem);
    }

    to {
      opacity: 1;
    }
  }
</style>
