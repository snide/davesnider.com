---
import Base from '@layouts/base.astro';
import { formatDate } from '@services/format-date';
import { CollectionEntry, getEntryBySlug } from 'astro:content';
const { slug } = Astro.params;
const entry: CollectionEntry<'posts'> = (await getEntryBySlug('posts', slug as string)) as CollectionEntry<'posts'>;
const { Content } = await entry!.render();

const formattedDate = formatDate(entry?.data.pubDate);

const pageImageProp = {
  ...(entry?.data.image !== undefined && {
    pageImage: Astro.site + entry.data.image.src
  })
};

const pageProps = {
  pageTitle: entry?.data.title,
  pageDescription: entry?.data.description,
  ...pageImageProp
};
---

<Base {...pageProps}>
  <div class="post">
    <h1>{entry?.data.title}</h1>
    <p class="post__date">{formattedDate}</p>
    <Content />
    <div>
      <a href="/">↩ More posts</a>
    </div>
  </div>
</Base>

<style is:global>
  .post {
    margin: 0 auto;
    animation-duration: 0.5s;
    font-size: 1.25rem;
    color: var(--subtle);
  }

  .post *:not([data-line]):not(:last-child) {
    margin-bottom: 1.5rem;
  }

  .post p code,
  .post li code {
    background-color: var(--navBg);
    font-family: 'BerkeleyMono', monospace;
    font-size: 0.9rem;
    word-break: break-all;
    padding: 0 0.2rem;
    display: inline-block;
    color: var(--subtle);
  }

  .post ul {
    padding-left: 1.5rem;
    list-style-color: #333;
  }
  .post ul li::marker {
    color: var(--listMarker);
    content: '❖ ';
  }

  .post ul li:not(:last-child) {
    margin-bottom: 0.75rem;
  }

  .post > * {
    max-width: 40rem;
    margin: 0 auto;
  }

  .post p a,
  .post li a {
    padding: 0.1rem 0.2rem;
    font-weight: 700;
    text-decoration: underline;
    color: var(--fg);
  }

  .post p a:hover,
  .post li a:hover {
    background-color: var(--fg);
    color: var(--bg);
    outline: solid 2px var(--fg);
  }

  .post h1,
  .post h2,
  .post h3,
  .post h4,
  .post h5,
  .post h6 {
    margin: 0 auto;
    font-weight: 700;
    font-family: var(--displayFont);
    color: var(--fg);
  }

  .post h1 {
    font-size: 3rem;
    line-height: 1.1;
    margin-bottom: 0.5rem !important;
  }

  .post > video {
    width: 100%;
    margin: 6rem auto !important;
    max-width: 1200px;
  }

  .post [data-rehype-pretty-code-fragment] {
    margin: 3rem auto !important;
    max-width: 60rem !important;
  }

  .post [data-rehype-pretty-code-fragment] > pre {
  }

  .post pre ::selection {
    color: var(--bg);
    background-color: var(--fg);
  }

  .post pre > code {
    font-size: 0.9rem;
    border: solid 1px var(--shiki-token-border);
    padding: 2rem 0;
    display: grid; /*  this is way the line will span whole width of `code` component */
    font-family: 'BerkeleyMono', monospace !important;
    background-color: var(--codeBg) !important;
    max-width: 100%;
    overflow-x: auto;
  }
  .post pre > code [data-line] {
    border-left: 0.25rem solid transparent;
    padding: 0 0.5rem;
  }
  .post pre > code [data-highlighted-line] {
    background-color: var(--shiki-token-line-highlight);
    border-color: var(--shiki-token-border);
  }
  /**
   *  data-line-numbers will be enabled on markdown
   *  with `showLineNumbers` meta string on it
   */
  .post pre > code[data-line-numbers] {
    counter-reset: line;
  }

  .post pre > code[data-line-numbers] > [data-line]::before {
    counter-increment: line;
    content: counter(line);
    display: inline-block;
    margin-right: 1rem;
    width: 2rem;
    text-align: left;
    color: var(--shiki-token-line-number);
  }
  .post pre > code > [data-line]::before {
    content: '';
    display: inline-block;
    width: 2rem;
    text-align: right;
  }

  /**
   *  we'll need to adjust the space required
   *  the number depending on the number of digits
   */
  .post pre > code[data-line-numbers-max-digits='2'] > [data-line]::before {
    width: 3rem;
  }

  .post code[data-line-numbers-max-digits='3'] > [data-line]::before {
    width: 3rem;
  }

  .post [data-rehype-pretty-code-fragment] {
    position: relative;
  }
  .post [data-rehype-pretty-code-title] {
    background-color: var(--shiki-token-border);
    font-family: var(--codeFont);
    font-weight: 600;
    font-size: 0.8rem;
    padding: 0.5rem 0.75rem;
    display: flex;
    margin-bottom: 0 !important;
    width: fit-content;
    color: var(--fg);
  }

  .post [data-rehype-pretty-code-title]::before {
    content: '❖ ';
    color: var(--subtle);
    margin-right: 0.5rem;
  }

  .post > *:first-child {
    opacity: 1;
    animation-duration: 0.5s;
    animation-name: slidedown;
    animation-fill-mode: both;
    animation-timing-function: ease-in-out;
  }

  .post > *:not(:first-child) {
    opacity: 1;
    animation-duration: 0.25s;
    animation-name: slideup;
    animation-fill-mode: both;
    animation-timing-function: ease-in-out;
    /*  animation-timing-function: cubic-bezier(0.694, 0.0482, 0.335, 1);  */
  }

  .post > *:nth-child(1) {
    animation-delay: 100ms;
  }

  .post > *:nth-child(2) {
    animation-delay: 100ms;
  }

  .post > *:nth-child(3) {
    animation-delay: 500ms;
  }

  .post > *:nth-child(4) {
    animation-delay: 600ms;
  }

  .post > *:nth-child(5) {
    animation-delay: 700ms;
  }

  .post > *:nth-child(6) {
    animation-delay: 800ms;
  }

  .post > *:nth-child(7) {
    animation-delay: 900ms;
  }

  .post > *:nth-child(8) {
    animation-delay: 1000ms;
  }

  .post > *:nth-child(9) {
    animation-delay: 800ms;
  }

  .post img + p {
    margin-top: 1.5rem;
  }

  .post__date {
    font-family: 'BerkeleyMono', monospace;
    text-transform: uppercase;
    font-size: 0.8rem;
    color: var(--subtle);
  }

  hr {
    border: none;
    border-bottom: solid 2px var(--listMarker);
    margin: 0 auto;
    max-width: 2rem !important;
  }

  @keyframes slideup {
    from {
      opacity: 0;
      transform: translateY(3rem);
    }

    to {
      opacity: 1;
    }
  }

  @keyframes slidedown {
    from {
      opacity: 0;
      transform: translateY(-3rem);
    }

    to {
      opacity: 1;
    }
  }

  @media (max-width: 768px) {
    .post {
      font-size: 1.1rem;
    }

    .post h1 {
      font-size: 2rem;
      line-height: 1.1;
    }
  }
</style>
